name: CI â€” docker-compose tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  docker-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.CI_PAT }}

      - name: Checkout users_service repo
        uses: actions/checkout@v4
        with:
          repository: Ingenieria-Web-2/users_service
          path: users_service
          token: ${{ secrets.CI_PAT }}

      - name: Checkout recipes_service repo
        uses: actions/checkout@v4
        with:
          repository: Ingenieria-Web-2/recipes_service
          path: recipes_service
          token: ${{ secrets.CI_PAT }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          # This workflow expects a PAT stored in repo/org secrets named `CI_PAT`.
          # Create a fine-grained PAT with Packages: Read & write and Repository: Read
          password: ${{ secrets.CI_PAT }}

      - name: Try to pull published images
        run: |
          docker pull ghcr.io/Ingenieria-Web-2/users_service:latest || true
          docker pull ghcr.io/Ingenieria-Web-2/recipes_service:latest || true

      - name: Build docker images with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./users_service/Dockerfile
          push: false
          tags: ghcr.io/Ingenieria-Web-2/users_service:latest
          cache-from: type=registry,ref=ghcr.io/Ingenieria-Web-2/users_service:latest
          cache-to: type=registry,ref=ghcr.io/Ingenieria-Web-2/users_service:cache,mode=max

      - name: Build recipes_service image with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./recipes_service/Dockerfile
          push: false
          tags: ghcr.io/Ingenieria-Web-2/recipes_service:latest
          cache-from: type=registry,ref=ghcr.io/Ingenieria-Web-2/recipes_service:latest
          cache-to: type=registry,ref=ghcr.io/Ingenieria-Web-2/recipes_service:cache,mode=max
      - name: Build docker-compose images (fallback)
        run: docker compose -f "$GITHUB_WORKSPACE/docker-compose.yaml" build --parallel || true

      - name: Start DB services
        run: docker compose -f "$GITHUB_WORKSPACE/docker-compose.yaml" up -d users_db recipes_db

      - name: Wait for users_db to be ready
        run: |
          echo "Waiting for Postgres (users_db)..."
          docker compose -f "$GITHUB_WORKSPACE/docker-compose.yaml" exec users_db bash -c 'until pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB"; do sleep 1; done'
        env:
          POSTGRES_USER: user
          POSTGRES_DB: users_db

      - name: Wait for recipes_db to be ready
        run: |
          echo "Waiting for Postgres (recipes_db)..."
          docker compose -f "$GITHUB_WORKSPACE/docker-compose.yaml" exec recipes_db bash -c 'until pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB"; do sleep 1; done'
        env:
          POSTGRES_USER: user
          POSTGRES_DB: recipes_db

      - name: Run users_service tests
        run: |
          mkdir -p reports
          docker compose -f "$GITHUB_WORKSPACE/docker-compose.yaml" run --rm users_service python -m pytest --junitxml=reports/users-results.xml -q

      - name: Run recipes_service tests
        run: |
          mkdir -p reports
          docker compose -f "$GITHUB_WORKSPACE/docker-compose.yaml" run --rm recipes_service python -m pytest --junitxml=reports/recipes-results.xml -q

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-reports
          path: reports/*.xml

      - name: Collect container logs
        if: always()
        run: |
          mkdir -p logs
          docker compose -f "$GITHUB_WORKSPACE/docker-compose.yaml" logs users_service > logs/users_service.log || true
          docker compose -f "$GITHUB_WORKSPACE/docker-compose.yaml" logs recipes_service > logs/recipes_service.log || true
        continue-on-error: true

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: service-logs
          path: logs/**

      - name: Tear down
        if: always()
        run: docker compose -f "$GITHUB_WORKSPACE/docker-compose.yaml" down -v

      - name: Debug workspace layout
        if: always()
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          pwd
          ls -la "$GITHUB_WORKSPACE" || true
